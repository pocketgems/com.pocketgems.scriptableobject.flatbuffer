name: Release Package
on: 
  # trigger release on push to main branch
  push:
    branches:
      - main
  # allow triggering of manual releases off branches for hot fixes 
  workflow_dispatch:
    inputs:
      dryrun:
        description: 'Dry Run (create release draft)'
        required: false
        default: true
        type: boolean
jobs:
  get-version:
    name: Get package.json "version"
    runs-on: ubuntu-latest
    # map the job outputs to step outputs
    outputs:
      version: ${{ steps.parse-step.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Parse Version From package.json
        id: parse-step
        run: |
          regex='"version" *: *"([0-9]+\.[0-9]+\.[0-9]+)"'
          [[ `cat package.json` =~ $regex ]] && echo "::set-output name=version::${BASH_REMATCH[1]}"
  check-version-changelog:
    name: Check Version & CHANGELOG
    runs-on: ubuntu-latest
    needs: get-version
    steps:
      - uses: actions/checkout@v2
      - name: Verify the "version" in package.json hasn't already been released
        run: |
          git fetch --prune --unshallow --tags
          tag_match=`git tag -l v${{ needs.get-version.outputs.version }}`
          [[ -z "$tag_match" ]]
      - name: Check CHANGELOG.md has notes for the package.json "version"
        run: |
          grep "## *\[${{ needs.get-version.outputs.version }}\]" CHANGELOG.md
  create-release:
    name: Create Github Release
    runs-on: ubuntu-latest
    needs: [get-version, check-version-changelog]
    steps:
      - uses: actions/checkout@v2
      # script to scrape changelog.  it is in-line instead of referencing a
      # file so it'l work calls from external repositories
      - name: Scrape CHANGELOG
        shell: python
        run: |
          import re
          regex = re.compile('^## *\[[0-9]+.[0-9]+.[0-9]+\]')
          with open('CHANGELOG.md') as f:
              output_f = open('RELEASE_NOTES', 'w')
              line = f.readline()
              read = False
              while line:
                  if regex.match(line):
                      if read: break
                      read = True
                  if read: output_f.write(line)
                  line = f.readline()
              output_f.close()
      - name: Tag & Create Github Release
        # retrieve version and release notes
        # Use Github CLI to tag and create the release
        run: |
          VERSION=${{ needs.get-version.outputs.version }}
          RELEASE_NOTES=`cat RELEASE_NOTES`
          rm RELEASE_NOTES
          gh release create "v$VERSION" -t "v$VERSION" -n "$RELEASE_NOTES" $DRYRUN
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRYRUN: "${{ inputs.dryrun && '-d' || '' }}"