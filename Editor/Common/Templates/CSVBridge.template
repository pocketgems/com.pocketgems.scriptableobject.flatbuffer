// AUTOGENERATED FILE
// DO NOT MODIFY DIRECTLY
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using PocketGems.Parameters.Common.Models.Editor;
using PocketGems.Parameters.DataGeneration.LocalCSV.Editor;
using PocketGems.Parameters.DataGeneration.Util.Editor;
using PocketGems.Parameters.Interface;
using PocketGems.Parameters.LocalCSV;

namespace {{namespace}}
{
#if !{{disableSymbol}}
    public partial class {{className}}
    {
        // invoked via reflection
        private static IReadOnlyList<string> {{checkSchemaMethodName}}(
            IInfoCSVFileCache infoCSVFileCache, IStructCSVFileCache structCSVFileCache)
        {
            var bridge = new CSVBridge(infoCSVFileCache, structCSVFileCache, null, null);
            bridge.CheckSchema();
            return bridge._errors;
        }

        // invoked via reflection
        private static IReadOnlyList<string> UpdateFromScriptableObjects(
            IInfoCSVFileCache infoCSVFileCache, IStructCSVFileCache structCSVFileCache,
            Type type, List<IScriptableObjectMetadata> scriptableObjectMetadatas)
        {
            var bridge = new CSVBridge(infoCSVFileCache, structCSVFileCache, type, scriptableObjectMetadatas);
            bridge.UpdateRows();
            return bridge._errors;
        }

        // invoked via reflection
        private static IReadOnlyList<string> {{readMethodName}}(
            IInfoCSVFileCache infoCSVFileCache, IStructCSVFileCache structCSVFileCache,
            Type type, List<IScriptableObjectMetadata> scriptableObjectMetadatas)
        {
            var bridge = new CSVBridge(infoCSVFileCache, structCSVFileCache, type, scriptableObjectMetadatas);
            bridge.ReadRows();
            return bridge._errors;
        }

        private readonly IInfoCSVFileCache _infoCSVFileCache;
        private readonly IStructCSVFileCache _structCSVFileCache;
        private readonly Type _type;
        private readonly List<string> _errors = new List<string>();
        private readonly List<IScriptableObjectMetadata> _scriptableObjectMetadatas;

        private {{className}}(
            IInfoCSVFileCache infoCSVFileCache,
            IStructCSVFileCache structCSVFileCache,
            Type type,
            List<IScriptableObjectMetadata> scriptableObjectMetadatas)
        {
            _infoCSVFileCache = infoCSVFileCache;
            _structCSVFileCache = structCSVFileCache;
            _type = type;
            _scriptableObjectMetadatas = scriptableObjectMetadatas;
        }

        private CSVFile _currentCSVFile;
        private string _currentGUID;
        private string _currentIdentifier;
        private string _currentPropertyName;
        private string _currentStructPath;
        private void SaveReadError(string error)
        {
            var filename = Path.GetFileName(_currentCSVFile.FilePath);
            StringBuilder sb = new StringBuilder($"[{filename}] CSV Data to Scriptable Object error:");
            if (_currentIdentifier != null)
                sb.Append($" [ID:{_currentIdentifier}]");
            else if (_currentGUID != null)
                sb.Append($" [GUID:{_currentGUID}]");
            if (_currentPropertyName != null)
                sb.Append($" [Property:{_currentPropertyName}] ");
            if (_currentStructPath != null)
                sb.Append($" [StructPath:{_currentStructPath}] ");
            sb.Append($" {error}");
            _errors.Add(sb.ToString());
        }

        private void CheckSchema()
        {
        {{~for interface in infoInterfaces~}}
            if (_infoCSVFileCache.IsLoaded<{{interface.InterfaceName}}>())
                CheckSchema{{interface.BaseName}}(_infoCSVFileCache.Load<{{interface.InterfaceName}}>());
        {{~end~}}
        {{~for interface in structInterfaces~}}
            if (_structCSVFileCache.IsLoaded<{{interface.InterfaceName}}>())
                CheckSchema{{interface.BaseName}}(_structCSVFileCache.Load<{{interface.InterfaceName}}>());
        {{~end~}}
        }

        private void ReadRows()
        {
            // enable cache so that the Scriptable Object lookups in Parameter Reference fields are fast
            // (see documentation in ScriptableObjectLookupCache for more details)
            CSVValueConverter.ParameterReference.EnableCache = true;

        {{~for interface in infoInterfaces~}}
            if (_type == typeof({{interface.InterfaceName}}))
                Read{{interface.BaseName}}();
        {{~end~}}

            CSVValueConverter.ParameterReference.EnableCache = false;
        }

        private void UpdateRows()
        {
        {{~for interface in infoInterfaces~}}
            if (_type == typeof({{interface.InterfaceName}}))
                Update{{interface.BaseName}}();
        {{~end~}}
        }

        private delegate T? AttemptReadStructsArrayDelegate<T>(T defaultStruct, StructKeyPathBuilder keyPathBuilder) where T : struct;

        /// <summary>
        /// attempt to read all structs rows defined in the csv
        /// </summary>
        private T[] AttemptReadStructsArray<T>(string propertyName, T[] originalArray, StructKeyPathBuilder keyPathBuilder, AttemptReadStructsArrayDelegate<T> attemptRead) where T : struct
        {
            int j = 0;
            List<T> structList = new List<T>();
            while (true)
            {
                keyPathBuilder.PushKey(propertyName, j);
                T defaultStruct;
                if (j < originalArray.Length)
                    defaultStruct = originalArray[j];
                else
                    defaultStruct = new T();
                T? updatedStruct = attemptRead(defaultStruct, keyPathBuilder);
                keyPathBuilder.PopKey();
                if (!updatedStruct.HasValue)
                    break;
                structList.Add(updatedStruct.Value);
                j++;
            }
            return structList.ToArray();
        }
    }
#endif
}
