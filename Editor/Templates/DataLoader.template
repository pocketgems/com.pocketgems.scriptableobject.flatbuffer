// AUTOGENERATED FILE
// DO NOT MODIFY DIRECTLY
using FlatBuffers;
using PocketGems.Parameters;
using PocketGems.Parameters.AssetLoader;
using UnityEngine;

namespace {{namespace}}
{
    public class {{dataLoaderClassName}} : {{interfaceType}}
    {
        private const string s_expectedParameterDataHash = "{{hash}}";

        public void LoadData({{parameterManagerType}} parameterManager, byte[] bytes)
        {
        {{~if infoInterfaces.size > 0 || structInterfaces.size > 0~}}
            var byteBuffer = new ByteBuffer(bytes);
            RootCollection collection = {{collectionStructName}}.GetRootAsRootCollection(byteBuffer);

            string hash = collection.{{hashFieldName}};
            if (hash != s_expectedParameterDataHash)
            {
                Debug.LogError("Data file is not compatible with source code.  Are you using an old data file or addressable asset?");
                return;
            }
        {{~end~}}
        {{~if infoInterfaces.size > 0~}}
            int infoLength = 0;
            /******************************
             * Loading Info Parameters
             ******************************/
        {{~end~}}
        {{~for interface in infoInterfaces~}}
            infoLength = collection.{{interface.FlatBufferStructName}}Length;
            for (int i = 0; i < infoLength; i++)
            {
                var parameter = collection.{{interface.FlatBufferStructName}}(i).Value;
                var wrapper = new {{interface.FlatBufferClassName}}(parameter);
                var identifier = wrapper.Identifier; // use the Identifier from the wrapper to pre-cache the field
                var guid = parameter.GUID;
            {{~for baseInterface in interface.BaseInterfaceNames~}}
                parameterManager.Load<{{baseInterface}}, {{interface.FlatBufferClassName}}>(wrapper, identifier, guid);
            {{~end~}}
                parameterManager.Load<{{interface.InterfaceName}}, {{interface.FlatBufferClassName}}>(wrapper, identifier, guid);
            }
        {{~end~}}
        {{~if structInterfaces.size > 0~}}
            int structLength = 0;
            /******************************
             * Loading Struct Parameters
             ******************************/
        {{~end~}}
        {{~for interface in structInterfaces~}}
            structLength = collection.{{interface.FlatBufferStructName}}Length;
            for (int i = 0; i < structLength; i++)
            {
                var parameter = collection.{{interface.FlatBufferStructName}}(i).Value;
                var wrapper = new {{interface.FlatBufferClassName}}(parameter);
                parameterManager.Load<{{interface.InterfaceName}}, {{interface.FlatBufferClassName}}>(wrapper, parameter.GUID);
            }
        {{~end~}}
        }
    }
}
