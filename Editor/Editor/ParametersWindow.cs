using System.IO;
using PocketGems.Parameters.CodeGeneration.Operation.Editor;
using PocketGems.Parameters.Common.Editor;
using PocketGems.Parameters.Common.Util.Editor;
using PocketGems.Parameters.DataGeneration.Operation.Editor;
using PocketGems.Parameters.DataGeneration.Util.Editor;
using PocketGems.Parameters.Editor.Validation.Editor;
using UnityEditor;
using UnityEngine;
using UnityEngine.TestTools;

namespace PocketGems.Parameters.Editor.Editor
{
    /// <summary>
    /// Editor window for various debug functionality & toggles.
    /// </summary>
    [ExcludeFromCoverage]
    internal class ParametersWindow : EditorWindow
    {
        private bool _areParametersSetup;
        Vector2 _scrollPos;

        [MenuItem(MenuItemConstants.RegenerateDataPath, false, MenuItemConstants.RegenerateDataPriority)]
        public static void GenerateData()
        {
            EditorParameterDataManager.GenerateCodeFiles(GenerateCodeType.IfNeeded, GenerateDataType.All);
        }

        [MenuItem(MenuItemConstants.RegenerateCodePath, false, MenuItemConstants.RegenerateCodePriority)]
        public static void GenerateCode()
        {
            EditorParameterDataManager.GenerateCodeFiles(GenerateCodeType.Generate, GenerateDataType.All);
        }

        [MenuItem(MenuItemConstants.ConfigPanelPath, false, MenuItemConstants.ConfigPanelPriority)]
        public static void OpenWindow()
        {
            GetWindow<ParametersWindow>(false, "Parameters Config", true);
        }

        [MenuItem(MenuItemConstants.OpenCSVFolderPath, false, MenuItemConstants.OpenCSVFolderPriority)]
        public static void OpenLocalCSVFolder()
        {
            EditorUtility.RevealInFinder(EditorParameterConstants.CSV.Dir);
        }

        void OnGUI()
        {
            _scrollPos = EditorGUILayout.BeginScrollView(_scrollPos);
            OnGUIPaths();
            OnGUIConfig();
            OnGUIStatus();
            OnGUIActions();
            EditorGUILayout.EndScrollView();
        }

        private void OnGUIPaths()
        {
            GUILayout.Label("Paths", EditorStyles.boldLabel);

            GUIStyle style = new GUIStyle(GUI.skin.button);
            style.fixedWidth = 80;

            void DisplayDirPath(string fieldTitle, string path)
            {
                EditorGUILayout.BeginHorizontal();
                EditorGUILayout.LabelField(fieldTitle, path);
                GUI.enabled = Directory.Exists(path);
                if (GUILayout.Button("Focus", style))
                {
                    EditorUtility.FocusProjectWindow();
                    Object obj = AssetDatabase.LoadAssetAtPath<Object>(path);
                    Selection.activeObject = obj;
                }
                EditorGUILayout.EndHorizontal();
            }

            var localCSVs = NamingUtil.RelativePath(EditorParameterConstants.CSV.Dir);
            DisplayDirPath("Local CSVs:", localCSVs);
            var scriptableObjects = NamingUtil.RelativePath(ParameterConstants.ScriptableObject.Dir);
            DisplayDirPath("Scriptable Objects:", scriptableObjects);
            var genScriptsDir = NamingUtil.RelativePath(EditorParameterConstants.CodeGeneration.RootDir);
            DisplayDirPath("Generated Source Files:", genScriptsDir);
            var genParamDir = NamingUtil.RelativePath(ParameterConstants.GeneratedAsset.SubDirectory);
            DisplayDirPath("Generated Data Files:", genParamDir);
            EditorGUILayout.Space();
            GUI.enabled = true;
        }

        private void OnGUIConfig()
        {
            GUILayout.Label("Auto Regeneration", EditorStyles.boldLabel);
            // the term "CSV" isn't used in code since this can change - the term "parameter" is the correct usage.
            // However, it is currently used here for user facing messaging & clarity.
            ParameterPrefs.AutoGenerateCodeOnCompilation =
                EditorGUILayout.Toggle("Code: On Compilation", ParameterPrefs.AutoGenerateCodeOnCompilation);
            ParameterPrefs.AutoGenerateDataOnAssetChange =
                EditorGUILayout.Toggle("Data: On Asset Change", ParameterPrefs.AutoGenerateDataOnAssetChange);
            ParameterPrefs.AutoValidateDataOnAssetChange =
                EditorGUILayout.Toggle("Validate All Data", ParameterPrefs.AutoValidateDataOnAssetChange);

            EditorGUILayout.Space();

            GUILayout.Label("Config", EditorStyles.boldLabel);
            ParameterPrefs.EnableInspectorAutoSave =
                EditorGUILayout.Toggle("Inspector Auto Save", ParameterPrefs.EnableInspectorAutoSave);
            ParameterPrefs.PlayModeHotLoading =
                EditorGUILayout.Toggle("Play Mode Hot Load", ParameterPrefs.PlayModeHotLoading);
            ParameterPrefs.ExpandableDrawer = EditorGUILayout.Toggle("Expandable Drawer", ParameterPrefs.ExpandableDrawer);
            ParameterPrefs.VerboseLogs = EditorGUILayout.Toggle("Verbose Debug Logs", ParameterPrefs.VerboseLogs);
            ParameterPrefs.DoNotDeleteSchemaFile = EditorGUILayout.Toggle("Don't Delete Schema File", ParameterPrefs.DoNotDeleteSchemaFile);

            EditorGUILayout.Space();
        }

        private void OnGUIStatus()
        {
            GUILayout.Label("Status", EditorStyles.boldLabel);
#if ADDRESSABLE_PARAMS
            const string assetType = "Addressable";
#else
            const string assetType = "Resource (non Addressable)";
#endif
            GUILayout.Label($"Generated Parameter Asset Type: {assetType}");
            GUILayout.Label($"Editor Is Compiling: {EditorApplication.isCompiling}");
            GUILayout.Label($"Should Generate All Data: {ParameterPrefs.ShouldGenerateAllData}");
            EditorGUILayout.Space();
        }

        private void OnGUIActions()
        {
            var buttonsEnabled = !EditorApplication.isCompiling;
            GUILayout.Label("Actions", EditorStyles.boldLabel);
            GUI.enabled = buttonsEnabled;

            if (GUILayout.Button("Validation Window"))
                ValidationWindow.GetWindow(true);

            if (GUILayout.Button("Check For Changes To Generate"))
            {
                EditorParameterDataManager.GenerateCodeFiles(GenerateCodeType.IfNeeded, GenerateDataType.IfNeeded);
                ParameterDebug.Log("Checked for changes to generate.");
            }

            if (GUILayout.Button("Re-save All Scriptable Objects"))
                ScriptableObjectUtil.ReSaveAllInfoScriptableObjects();

            EditorGUILayout.Space();

            GUILayout.Label("Debug Actions", EditorStyles.boldLabel);
            EditorGUILayout.HelpBox("The following actions are invoked automatically.  These buttons force these actions to occur for debugging purposes.", MessageType.Warning);

            if (GUILayout.Button("Initial Setup"))
                EditorParameterDataManager.InitialSetup(true);
            if (GUILayout.Button("Generate All (code & data)"))
                EditorParameterDataManager.GenerateCodeFiles(GenerateCodeType.Generate, GenerateDataType.All);
            if (GUILayout.Button("Generate Code Only"))
                EditorParameterDataManager.GenerateCodeFiles(GenerateCodeType.Generate, GenerateDataType.None);
            if (GUILayout.Button("Generate Data Only"))
                GenerateData();
            if (GUILayout.Button("Disable code Interface Implementations"))
                EditorParameterDataManager.DisableInterfaceImplementations();
            GUI.enabled = EditorApplication.isPlaying;
            if (GUILayout.Button("App Running: Check for Parameter HotLoad"))
            {
                // refresh asset data base to force project refresh which would trigger
                // asset postprocessor if there are parameter changes
                AssetDatabase.SaveAssets();
                AssetDatabase.Refresh();
            }
            GUI.enabled = true;
            EditorGUILayout.Space();
        }
    }
}
